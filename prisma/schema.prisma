generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  googleId     String     @unique
  email        String     @unique
  name         String?
  picture      String?
  accessToken  String?
  refreshToken String?
  role         Role       @default(WAREHOUSE_ADMIN)
  warehouse    Warehouse? @relation("AdminWarehouse") // No `fields` or `references` here!
  googleSheetId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Warehouse {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  location String
  admin    User   @relation("AdminWarehouse", fields: [adminId], references: [id])
  adminId  String @unique @db.ObjectId

  clients  Client[]           @relation("WarehouseClients")
  products WarehouseProduct[] @relation("Warehouse_Products") // Explicit relation name

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Order     Order[]
}

model Client {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  password    String
  location    String
  warehouse   Warehouse? @relation("WarehouseClients", fields: [warehouseId], references: [id])
  warehouseId String?    @db.ObjectId

  products ClientProduct[] @relation("Client_Products") // Explicit relation name

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Order     Order[]
}

model Product {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  code     String   @unique
  category Category
  type     Type
  brand    String?
  price    Float
  img      String?
  unit     String

  warehouses WarehouseProduct[] @relation("Warehouse_Products") // Explicit relation name
  clients    ClientProduct[]    @relation("Client_Products") // Explicit relation name

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Demand    Demand[]
  Order     Order[]
}

model WarehouseProduct {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  warehouse   Warehouse @relation("Warehouse_Products", fields: [warehouseId], references: [id])
  warehouseId String    @db.ObjectId
  product     Product   @relation("Warehouse_Products", fields: [productId], references: [id])
  productId   String    @db.ObjectId
  quantity    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model ClientProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  client    Client  @relation("Client_Products", fields: [clientId], references: [id])
  clientId  String  @db.ObjectId
  product   Product @relation("Client_Products", fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Order {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  client           Client    @relation(fields: [clientId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  paymentMode      Payment
  paymentStatus    Boolean
  quantity         String
  inStock          Boolean
  deliveryStatus   Delivery 
  expectedDelivery DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  clientId    String   @db.ObjectId
  productId   String   @db.ObjectId
  warehouseId String   @db.ObjectId
}

model Demand {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  product     Product @relation(fields: [productId], references: [id])
  productId   String  @db.ObjectId
  demandCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum Category {
  PERISHABLE
  NON_PERISHABLE
}

enum StockRule {
  FIFO
  LIFO
}

enum Role {
  WAREHOUSE_ADMIN
  CLIENT
}

enum Type {
  FOOD
  ELECTRONICS
  CLOTHING
  FURNITURE
  MEDICINE
  BEAUTY
  TOOLS
  TOYS
  AUTOMOTIVE
  STATIONERY
  OTHER
}

enum Delivery {
  ORDER_PLACED
  PROCESSING
  DISPATCHED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum Payment {
  UPI
  COD 
  NetBanking
  Card
}